#!/usr/bin/env python3

import os
import sys
import tempfile
import subprocess

from io import BytesIO
from pathlib import Path
from sys import argv

import macholib.MachO

from macholib.mach_o import (
    LC_VERSION_MIN_MACOSX,
    LC_DATA_IN_CODE,
)

#
# Binary specified in arguments.
#
input_path = Path(argv[1].strip())

#
# Check if we even have a 32-bit binary or 32-bit slice.
#
result = subprocess.run(["lipo", input_path, "-info"], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True, check=False)
if "i386" not in result.stdout:
    print("Binary is not 32-bit, nothing to do")
    sys.exit(0)

#
# Extract i386 slice from FAT binary if needed.
#
print(f"Processing {input_path}")
if "Non-fat" not in result.stdout:
    print("Binary is fat, extracting 32-bit slice")
    is_fat_binary = True
    slice_temp_file, slice_path = tempfile.mkstemp()
    slice_path = Path(slice_path)
    os.close(slice_temp_file)
    subprocess.run(["lipo", input_path, "-thin", "i386", "-output", slice_path], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True, check=False)
else:
    print("Binary is pure 32-bit")
    is_fat_binary = False
    slice_path = input_path

#
# Read Mach-O binary.
#
original_file = BytesIO(slice_path.read_bytes())
mach_file = macholib.MachO.MachO(slice_path)

#
# Strip LC_VERSION_MIN_MACOSX command.
#
for cmd in mach_file.headers[0].commands:
    if cmd[0].cmd == LC_VERSION_MIN_MACOSX:
        mach_file.headers[0].changedHeaderSizeBy(-cmd[0].cmdsize)
        mach_file.headers[0].commands.remove(cmd)
        mach_file.headers[0].header.ncmds -= 1
        print("Removed LC_VERSION_MIN_MACOSX")

#
# Strip LC_DATA_IN_CODE command if zero.
#
for cmd in mach_file.headers[0].commands:
    if cmd[0].cmd == LC_DATA_IN_CODE:
        if cmd[1].datasize == 0:
            mach_file.headers[0].changedHeaderSizeBy(-cmd[0].cmdsize)
            mach_file.headers[0].commands.remove(cmd)
            mach_file.headers[0].header.ncmds -= 1
            print("Removed LC_DATA_IN_CODE")
        else:
            print("LC_DATA_IN_CODE data size is non-zero!")
            if is_fat_binary:
                slice_path.unlink()
            sys.exit(-1)

#
# Align symbol table offset.
#
sym_cmd = mach_file.headers[0].getSymbolTableCommand()

old_sym_off = sym_cmd.symoff
new_sym_off = (old_sym_off + 3) & ~(3)
print(f"Old symbol table offset at {old_sym_off}, new symbol table will be at {new_sym_off}")
sym_off_delta = new_sym_off - old_sym_off

#
# Align string table offset.
#
old_str_off = sym_cmd.stroff
new_str_off = ((old_str_off + sym_off_delta) + 3) & ~(3)
print(f"Old string table offset at {old_str_off}, new string table will be at {new_str_off}")
str_off_delta = new_str_off - (old_str_off + sym_off_delta)

#
# Write new offsets to symbol table command.
#
sym_cmd.symoff = new_sym_off
sym_cmd.stroff = new_str_off

#
# Write Mach-O header to new file.
#
with open(slice_path, "wb") as new_file:
    mach_file.headers[0].write(new_file)
    original_file.seek(new_file.tell())

    #
    # Copy rest of file and pad accordingly.
    #
    if old_sym_off > old_str_off:
        new_file.write(original_file.read(old_str_off - original_file.tell()))
        new_file.write(b"\0" * str_off_delta)
        new_file.write(original_file.read(old_sym_off - original_file.tell()))
        new_file.write(b"\0" * sym_off_delta)
        new_file.write(original_file.read())
    else:
        new_file.write(original_file.read(old_sym_off - original_file.tell()))
        new_file.write(b"\0" * sym_off_delta)
        new_file.write(original_file.read(old_str_off - original_file.tell()))
        new_file.write(b"\0" * str_off_delta)
        new_file.write(original_file.read())

print(f"Wrote new binary to {slice_path}")
if is_fat_binary:
    print("Replacing 32-bit slice in fat binary")
    result = subprocess.run(["lipo", input_path, "-replace", "i386", slice_path, "-output", input_path], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True, check=False)
    slice_path.unlink()
